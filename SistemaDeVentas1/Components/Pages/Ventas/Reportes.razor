@page "/reporte-ventas"
@using SistemaDeVentas1.Interfaces
@using SistemaDeVentas1.Models
@inject IVentaRepositorio VentaRepositorio
@inject IJSRuntime JSRuntime

<h3 class="text-center">Reporte de Ventas</h3>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6 mx-auto">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="fechaInicio" class="form-label">Fecha de Inicio</label>
                            <input type="date" class="form-control" @bind="FechaInicio" />
                        </div>
                        <div class="col-md-6">
                            <label for="fechaFin" class="form-label">Fecha de Fin</label>
                            <input type="date" class="form-control" @bind="FechaFin" />
                        </div>
                    </div>
                    <div class="d-flex justify-content-center mt-3">
                        <button class="btn btn-primary" @onclick="GenerarReporte">Buscar Ventas</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (DetalleVentas != null && DetalleVentas.Any())

    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">Reporte de Ventas</div>
                    <div class="card-body">
                        <!-- Contenedor para la tabla y el botón de exportar -->
                        <div class="d-flex justify-content-between mb-3">
                            <!-- Botón de exportar alineado a la derecha -->
                            <button class="btn btn-success" @onclick="ExportarAExcel">Exportar a Excel</button>
                        </div>
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Vehiculo</th>
                                    <th>Precio</th>
                                    <th>Total</th>
                                    <th>Fecha de Venta</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in DetalleVentas)

                                {
                                    <tr>
                                        <td>@detalle.IdProductoNavigation.Marca @detalle.IdProductoNavigation.Modelo</td>
                                        <td>@detalle.Precio</td>
                                        <td>@detalle.Total</td>
                                        <td>@detalle.IdVentaNavigation.FechaRegistro?.ToString("dd/MM/yyyy")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@code {
    private DateTime? FechaInicio { get; set; }

    private DateTime? FechaFin { get; set; }

    private List<DetalleVenta> DetalleVentas { get; set; } = new();



    private async Task GenerarReporte()

    {

        if (!FechaInicio.HasValue || !FechaFin.HasValue)

        {

            MostrarAlerta("Por favor, seleccione un rango de fechas.", "alert-warning");

            return;

        }



        try

        {

            DetalleVentas = await VentaRepositorio.Reporte(FechaInicio.Value.ToString("dd/MM/yyyy"), FechaFin.Value.ToString("dd/MM/yyyy"));



            if (DetalleVentas.Any())

            {

                MostrarAlerta($"Se generó el reporte de ventas de {FechaInicio.Value.ToString("dd/MM/yyyy")} a {FechaFin.Value.ToString("dd/MM/yyyy")}.", "alert-success");

            }

            else

            {

                MostrarAlerta("No se encontraron ventas en el rango de fechas especificado.", "alert-warning");

            }

        }

        catch (Exception ex)

        {

            MostrarAlerta($"Error al generar el reporte: {ex.Message}", "alert-danger");

        }

    }



    private async Task ExportarAExcel()

    {

        var csv = "Producto,Cantidad,Precio,Total,Fecha de Venta\n";

        foreach (var detalle in DetalleVentas)

        {

            csv += $"{detalle.IdProductoNavigation.Marca} {detalle.IdProductoNavigation.Modelo},{detalle.Cantidad},{detalle.Precio},{detalle.Total},{detalle.IdVentaNavigation.FechaRegistro?.ToString("dd/MM/yyyy")}\n";

        }



        var fileName = $"Reporte_Ventas_{FechaInicio.Value.ToString("dd_MM_yyyy")}_{FechaFin.Value.ToString("dd_MM_yyyy")}.csv";

        await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, csv);

    }



    private void MostrarAlerta(string mensaje, string clase)

    {

        // Función para mostrar alertas en la interfaz

        // Aquí podrías agregar lógica para mostrar un mensaje al usuario

    }
}
